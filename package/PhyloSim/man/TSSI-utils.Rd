% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SQLiteTSSI-utils.R
\name{TSSI-utils}
\alias{TSSI-utils}
\alias{getLeaves}
\alias{getLineage}
\alias{getPatristic}
\alias{getGraph}
\title{SQLite Trait Simulation Utilities}
\usage{
getLeaves(net)

getLineage(net, v)

getPatristic(net)

getGraph(net, leaf = TRUE)
}
\arguments{
\item{net}{A two elements list: the name of the network and an SQLite
database connection from function \code{\link[DBI]{dbConnect}}.}

\item{v}{An integer vector: indices of the vertices for which to
determine the lineage (or most direct lineage for a reticulated graph).}

\item{leaf}{A logical: whether or not to declare the leaves of the graph
(i.e., the vertices that have no descendants) as species in the graph.}
}
\value{
\describe{
  \item{getLeaves}{The indices of the vertices having no descendents.}
  \item{getLineage}{A list of integer vectors, each of which contains the
  indices of the vertices of its (most direct) lineage.}
  \item{getPatristic}{An object of class "dist" as obtained from function
  \code{\link[stats]{dist}} containing patristic distance values. The
  patristic distance is expressed in term of the simulation time step.}
  \item{getGraph}{A \code{\link[MPSEM]{graph-class}} object.}
}
}
\description{
Utility functions for the trait and sequence simulation interface, a database
interface for simulating traits along evolutionary time.
}
\details{
The lineages returned by function \code{getLineage} are unique in
the case of a phylogenetic tree (including linear trees). For a reticulated
network, however, there is oftentimes several possible lineages since any
vertex may have multiple ancestor vertices. Whenever necessary, function
\code{getLineage} works around that matter by selecting, among the multiple
ancestors of a vertex, that which is the closest to the root of the graph.
}
\section{Functions}{
\itemize{
\item \code{getLeaves()}: Get Network Leaves

Extract the leaves (i.e., the vertices having no descendents) from a network.

\item \code{getLineage()}: Get Vertex Lineage

Get the direct lineage of a vertex (node of leaf) in a phylogenetic tree, or
the most direct lineage of a vertex in a phylogenetic network.

\item \code{getPatristic()}: Get Dissimilarity

Obtain the pairwise dissimilarities (linear, tree) for average pairwise
dissimilarities (reticulated) between the vertices of a phylogenetic graph.

\item \code{getGraph()}: Get Graph

Obtain a graph object from a simulated phylogenetic graph.

}}
\examples{
## Loading the example graph (reticulated; N = 100) as follows:
openNetwork(
filename = system.file(
  package = "PhyloSim",
  "extdata",
  "reticulated-ex2.sim"
),
load = TRUE
) -> net2

## Which vertex is a leaf is determined as follows:
leaf <- getLeaves(net2)
leaf

## The pairwise average patristic distances are obtained as follows:
dst <- getPatristic(net2)

## The structure of the "dist" object can be viewed as follows:
str(dst)

## The first elements of the contained vector:
head(dst)

## There is no convenient slicing operator for "dist" objects, one can
## display a slice limited to the first six objects as follows:
as.dist(as.matrix(dst)[1:6,1:6])

## The phylogenetic graph is extracted as follows:
gr <- getGraph(net2)

## The structure of the graph-class object can be viewed as follows:
str(gr)

## Note: function from package MPSEM is needed to further process graph-class
## objects. For instance, it can be used to calculate phylogenetic
## eigenvector maps, which can, in turn, be used to predict trait values.

}
\author{
\packageAuthor{PhyloSim}
}

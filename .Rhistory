y
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
head(y, 1L) != 1L
y <- tips[1L]
x <- res2
while(head(y, 1L) != 1L)
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
rm(x,y)
getDescendents <- function(x, y) {
while(head(y, 1L) != 1L)
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
}
getDescendents <- function(x, y) {
while(head(y, 1L) != 1L)
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
}
getDescendents <- function(x, y) {
while(head(y, 1L) != 1L)
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
}
## Get the concatenated sequences
original2 <- concatenate(res2$sqn)
## Get the trail from the first tip:
show.sequences(
original2[getDescendents(res2, tips[1L])],
cex=0.75,
font=2L
)
## Get the trail from the tenth tip:
show.sequences(
original2[getDescendents(res2, tips[10L])],
cex=0.75,
font=2L
)
## Plot the trait simulation results for the first trail:
i <- getDescendents(res2, tips[1L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green", lty=3L)
## Plot the trait simulation results for the tenth trail:
i <- getDescendents(res2, tips[10L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green", lty=3L)
rm(dnaParam,I,traitMod,res,res2,nogaps,original,original2,show.sequences,
getDescendents,i,tips)
rm(list=ls())
detach("package:PhyloSim", unload=TRUE)
library(yaml)
library(Rcpp)
library(PhyloSim)  ## detach("package:PhyloSim", unload=TRUE)
library(ape)
yaml.load_file(
system.file(
package = "PhyloSim",
"extdata",
"evolMod.yml"
)
) -> dnaParam
read.mutationMat(
dnaParam$DNA
) -> I
## The transition intensity matrix:
I
## Setting RNG seed:
set.seed(12345)
## Generate the sequences:
simulate_linear(
I = I,
NS = 35,
NN = 150,
gamma.shape = 5,
gamma.scale = 5e-4,
timestep = 1
) -> res
## Get the concatenated sequences
original <- concatenate(res$sqn)
nogaps <-  concatenate(res$sqn, discard = "-")
## Function for showing sequence:
show.sequences <- function(x, xlim, ylim, xlab="Position", text = FALSE,
col=c(A="red",`T`="blue",C="green",G="yellow", `-`="grey"),
...) {
par(mar=c(4,7,1,1))
if(missing(xlim))
xlim <- c(0,10*ceiling(max(sapply(x,nchar))/10))
if(missing(ylim))
ylim <- c(length(x), 0)
dev.hold()
plot(NA, xlim=xlim, ylim=ylim, axes=FALSE, xlab=xlab, ylab="", ...)
axis(1L)
axis(2L, at=1:length(x), labels = names(x), las=1)
for(i in 1L:length(x)) {
cc <- unlist(strsplit(x[i],""))
for(j in 1L:length(cc)) {
rect(j - 1, i - 0.5, j, i + 0.5, col = col[cc[j]], border = col[cc[j]])
if(text) text(j - 0.5, i, cc[j], ...)
}
}
dev.flush()
invisible(NULL)
}
## Showing the resulting sequences:
show.sequences(original, cex=0.75, font=2L)   ## Natively aligned
show.sequences(nogaps, cex=0.75, font=2L)     ## Raw
## Resetting RNG seed:
set.seed(12345)
## The trait evolution model parameters:
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
## Generate the sequences:
simulate_linear(
I = I,
NS = 300,
NN = 150,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
gamma.shape = 5,
gamma.scale = 5e-4,
timestep = 1
) -> res2
## These are the trait evolution models that were used:
res2$trait$tem
## Plot the trait simulation results:
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,300), ylim=range(res2$trait$traitLog), xlab="Time",
ylab="Trait value", las=1L)
lines(x=0:299, y=res2$trait$traitLog[,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:299, y=res2$trait$optimLog[,1L], col="black", lty=3L)
lines(x=0:299, y=res2$trait$traitLog[,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:299, y=res2$trait$optimLog[,2L], col="red", lty=3L)
lines(x=0:299, y=res2$trait$traitLog[,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:299, y=res2$trait$optimLog[,3L], col="blue", lty=3L)
lines(x=0:299, y=res2$trait$traitLog[,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:299, y=res2$trait$optimLog[,4L], col="green", lty=3L)
original2 <- concatenate(res2$sqn)
show.sequences(original2, cex=0.75, font=2L)
## Clean up:
rm(dnaParam,I,traitMod,res,res2,nogaps,original,original2,show.sequences)
## Load the example of a configuration file provided with the
## package:
yaml.load_file(
system.file(
package = "PhyloSim",
"extdata",
"evolMod.yml"
)
) -> dnaParam
## The configuration list is located in member `$DNA`
read.mutationMat(
dnaParam$DNA
) -> I
## The transition intensity matrix:
I
## Resetting RNG seed:
set.seed(12345)
## Generate the sequences:
simulate_tree(
I = I,
NS = 300,
NN = 150
) -> res
## Get the concatenated sequences
original <- concatenate(res$sqn)
nogaps <-  concatenate(res$sqn, discard = "-")
## Function for showing sequence:
show.sequences <- function(
x, xlim, ylim, xlab = "Position", text = FALSE,
col=c(A="red",`T`="blue",C="green",G="yellow", `-`="grey"), ...) {
par(mar=c(4,7,1,1))
if(missing(xlim))
xlim <- c(0,10*ceiling(max(sapply(x,nchar))/10))
if(missing(ylim))
ylim <- c(length(x), 0)
dev.hold()
plot(NA, xlim=xlim, ylim=ylim, axes=FALSE, xlab=xlab, ylab="", ...)
axis(1L)
axis(2L, at=1:length(x), labels = names(x), las=1)
for(i in 1L:length(x)) {
cc <- unlist(strsplit(x[i],""))
for(j in 1L:length(cc)) {
rect(j - 1, i - 0.5, j, i + 0.5, col = col[cc[j]], border = col[cc[j]])
if(text) text(j - 0.5, i, cc[j], ...)
}
}
dev.flush()
invisible(NULL)
}
## Showing the resulting sequences:
show.sequences(original, cex=0.75, font=2L)   ## Natively aligned
show.sequences(nogaps, cex=0.75, font=2L)     ## Raw
## Resetting RNG seed:
set.seed(12345)
## The trait evolution model parameters:
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
## Generate the sequences with the traits:
simulate_tree(
I = I,
NS = 300,
NN = 150,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1L, 0.25)
) -> res2
## These are the trait evolution models that were used:
res2$trait$tem
## Obtain the nodes that are tips:
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
## A function to obtain all the descendents from a tip:
getDescendents <- function(x, y) {
while(head(y, 1L) != 1L)
lapply(x$edge, function(x, y) y %in% x, y = head(y,1L)) %>%
unlist %>%
which %>%
c(y) -> y
y
}
## Get the concatenated sequences
original2 <- concatenate(res2$sqn)
## Get the trail from the first tip:
show.sequences(
original2[getDescendents(res2, tips[1L])],
cex=0.75,
font=2L
)
## Get the trail from the tenth tip:
show.sequences(
original2[getDescendents(res2, tips[10L])],
cex=0.75,
font=2L
)
## Plot the trait simulation results for the first trail:
i <- getDescendents(res2, tips[1L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green", lty=3L)
## Plot the trait simulation results for the tenth trail:
i <- getDescendents(res2, tips[10L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green", lty=3L)
## Clean up:
rm(dnaParam,I,traitMod,res,res2,nogaps,original,original2,show.sequences,
getDescendents,i,tips)
## Load the example of a configuration file provided with the
## package:
yaml.load_file(
system.file(
package = "PhyloSim",
"extdata",
"evolMod.yml"
)
) -> dnaParam
## The configuration list is located in member `$DNA`
read.mutationMat(
dnaParam$DNA
) -> I
## The transition intensity matrix:
I
## Setting seed:
set.seed(12345)
## Generate the sequences:
simulate_network(
I = I,
NS = 300,
NN = 150,
SID = rep(c("S1","S2","S3"), each=50),
NC = function() 1L + rpois(1L, 1.5),
NP = function() 1L + rpois(1L, 0.5),
verbose = FALSE
) -> res
## Get the concatenated sequences
original <- concatenate(res$sqn)
nogaps <-  concatenate(res$sqn, discard = "-")
## Function for showing sequence:
show.sequences <- function(
x, xlim, ylim, xlab = "Position", text = FALSE,
col=c(A="red",`T`="blue",C="green",G="yellow", `-`="grey"), ...) {
par(mar=c(4,7,1,1))
if(missing(xlim))
xlim <- c(0,10*ceiling(max(sapply(x,nchar))/10))
if(missing(ylim))
ylim <- c(length(x), 0)
dev.hold()
plot(NA, xlim=xlim, ylim=ylim, axes=FALSE, xlab=xlab, ylab="", ...)
axis(1L)
axis(2L, at=1:length(x), labels = names(x), las=1)
for(i in 1L:length(x)) {
cc <- unlist(strsplit(x[i],""))
for(j in 1L:length(cc)) {
rect(j - 1, i - 0.5, j, i + 0.5, col = col[cc[j]], border = col[cc[j]])
if(text) text(j - 0.5, i, cc[j], ...)
}
}
dev.flush()
invisible(NULL)
}
## Showing the resulting sequences:
show.sequences(original, cex=0.75, font=2L)   ## Natively aligned
show.sequences(nogaps, cex=0.75, font=2L)     ## Raw
## Resetting RNG seed:
set.seed(12345)
## The trait evolution model parameters:
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
## Generate the sequences with the traits:
simulate_network(
I = I,
NS = 300,
NN = 150,
SID = rep(c("S1","S2","S3"), each=50),
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1L, 1.5),
NP = function() 1L + rpois(1L, 0.5)
) -> res2
## These are the trait evolution models that were used:
res2$trait$tem
## Obtain the nodes that are tips:
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
## Function to obtain the most direct evolutionary trail:
getDescTrail <- function(net, desc) {
trail <- desc
while(TRUE) {
net$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
if(!length(asc)) break
if(length(asc) > 1L)
sapply(
asc,
function(x) net$cont[[x]][net$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
}
trail
}
## Get the concatenated sequences
original2 <- concatenate(res2$sqn)
## Get the trail from the first tip:
show.sequences(
original2[getDescTrail(res2, tips[1L])],
cex=0.75,
font=2L
)
## Get the trail from the tenth tip:
show.sequences(
original2[getDescTrail(res2, tips[10L])],
cex=0.75,
font=2L
)
## Plot the trait simulation results for the first trail:
i <- getDescTrail(res2, tips[1L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black",
lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green",
lty=3L)
## Plot the trait simulation results for the tenth trail:
i <- getDescTrail(res2, tips[10L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black",
lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green",
lty=3L)
## Clean up:
rm(dnaParam,I,traitMod,res,res2,nogaps,original,original2,show.sequences,
getDescTrail,i,tips)

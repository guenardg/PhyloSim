par(mar=c(4,7,1,1))
if(missing(xlim))
xlim <- c(0,10*ceiling(max(sapply(x,nchar))/10))
if(missing(ylim))
ylim <- c(length(x), 0)
dev.hold()
plot(NA, xlim=xlim, ylim=ylim, axes=FALSE, xlab=xlab, ylab="", ...)
axis(1L)
axis(2L, at=1:length(x), labels = names(x), las=1)
for(i in 1L:length(x)) {
cc <- unlist(strsplit(x[i],""))
for(j in 1L:length(cc)) {
rect(j - 1, i - 0.5, j, i + 0.5, col = col[cc[j]], border = col[cc[j]])
if(text) text(j - 0.5, i, cc[j], ...)
}
}
dev.flush()
invisible(NULL)
}
## Showing the resulting sequences:
show.sequences(original, cex=0.75, font=2L)   ## Natively aligned
show.sequences(nogaps, cex=0.75, font=2L)     ## Raw
## Resetting RNG seed:
set.seed(12345)
## The trait evolution model parameters:
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
simulate_network(
I = I,
NS = 300,
NN = 150,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1L, 1.5),
NP = function() 1L + rpois(1L, 0.5),
verbose = FALSE
) -> res2
simulate_network(
I = I,
NS = 300,
NN = 150,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1L, 1.5),
NP = function() 1L + rpois(1L, 0.5)
) -> res2
res2$trait$tem
res2$edge %>%
lapply(function(x) !length(x))
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist -> tips
tips
tips
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
tips
res2$edge
tips[1L]
res2$edge %>%
lapply(function(x, y) y $in$ x, y = tips[1L])
res2$edge %>%
lapply(function(x, y) y %in% x, y = tips[1L])
res2$edge %>%
lapply(function(x, y) y %in% x, y = tips[1L]) %>%
unlist
res2$edge %>%
lapply(function(x, y) y %in% x, y = tips[1L]) %>%
unlist %>%
which
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
res2$edge %>%
lapply(function(x, y) y %in% x, y = tips[1L]) %>%
unlist %>%
which -> pars
pars
res2$cont[pars]
res2$edge[pars]
res2$cont[pars]
i=1L
res2$cont[pars[i]]
res2$edge[pars[i]]
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
desc <- tips[1L]
desc
rm(pars)
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
length(asc) > 1L
i
res2$edge[pars[i]] == desc
asc[i]
res2$edge[asc[i]] == desc
res2$edge[[asc[i]]] == desc
res2$cont[[asc[i]]]
res2$cont[[asc[i]]][res2$edge[[asc[i]]] == desc]
asc
sapply(asc, function(x) res2$cont[[x]][res2$edge[[x]] == desc])
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
)
wh
asc
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.]
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
asc
desc
desc <- tips[1L]
desc
desc <- tips[1L]
trail <- desc
trail
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
desc <- tips[1L]
trail <- desc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
trail
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
trail
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
trail
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
trail
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
asc
trail <- c(asc, trail)
desc <- asc
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
asc
length(asc)
!length(asc)
!length(asc)
trail
desc <- tips[1L]
trail <- desc
while(TRUE) {
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
if(!length(asc)) break
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
}
trail
rm(i,trail,asc,desc)
getDescTrail <- function(net, desc) {
trail <- desc
while(TRUE) {
res2$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
if(!length(asc)) break
if(length(asc) > 1L)
sapply(
asc,
function(x) res2$cont[[x]][res2$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
}
trail
}
getDescTrail <- function(net, desc) {
trail <- desc
while(TRUE) {
net$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
if(!length(asc)) break
if(length(asc) > 1L)
sapply(
asc,
function(x) net$cont[[x]][net$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
}
trail
}
getDescTrail(res2, tips[1L])
getDescTrail(res2, tips[2L])
## Get the concatenated sequences
original2 <- concatenate(res2$sqn)
show.sequences
show.sequences(
original2[getDescTrail(res2, tips[1L])],
cex=0.75,
font=2L
)
show.sequences(
original2[getDescTrail(res2, tips[10L])],
cex=0.75,
font=2L
)
i <- getDescTrail(res2, tips[10L])
i
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black",
lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green",
lty=3L)
## Resetting RNG seed:
set.seed(12345)
## The trait evolution model parameters:
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
## Generate the sequences with the traits:
simulate_network(
I = I,
NS = 300,
NN = 150,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1L, 1.5),
NP = function() 1L + rpois(1L, 0.5)
) -> res2
## These are the trait evolution models that were used:
res2$trait$tem
## Obtain the nodes that are tips:
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
getDescTrail <- function(net, desc) {
trail <- desc
while(TRUE) {
net$edge %>%
lapply(function(x, y) y %in% x, y = desc) %>%
unlist %>%
which -> asc
if(!length(asc)) break
if(length(asc) > 1L)
sapply(
asc,
function(x) net$cont[[x]][net$edge[[x]] == desc]
) %>%
which.min %>%
asc[.] -> asc
trail <- c(asc, trail)
desc <- asc
}
trail
}
## Get the concatenated sequences
original2 <- concatenate(res2$sqn)
## Get the trail from the first tip:
show.sequences(
original2[getDescTrail(res2, tips[1L])],
cex=0.75,
font=2L
)
## Get the trail from the tenth tip:
show.sequences(
original2[getDescTrail(res2, tips[10L])],
cex=0.75,
font=2L
)
## Plot the trait simulation results for the first trail:
i <- getDescTrail(res2, tips[10L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black",
lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green",
lty=3L)
i <- getDescTrail(res2, tips[1L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black",
lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green",
lty=3L)
i <- getDescTrail(res2, tips[10L])
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black",
lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green",
lty=3L)
rm(dnaParam,I,traitMod,res,res2,nogaps,original,original2,show.sequences,
getDescTrail,i,tips)
detach("package:PhyloSim", unload=TRUE)
rm(list=ls())
library(yaml)
library(Rcpp)
library(PhyloSim)  ## detach("package:PhyloSim", unload=TRUE)
library(ape)

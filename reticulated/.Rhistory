rm(list=ls())
library(yaml)
library(Rcpp)
library(PhyloSim)  ## detach("package:PhyloSim", unload=TRUE)
library(ape)
source("aux.R")
## Reticulated sequence simulation
## Load the example of a configuration file provided with the
## package:
yaml.load_file(
system.file(
package = "PhyloSim",
"extdata",
"evolMod.yml"
)
) -> dnaParam
## The configuration list is located in member `$DNA`
read.mutationMat(
dnaParam$DNA
) -> I
## The transition intensity matrix:
I
## The trait evolution model parameters:
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
## A larger example:
simulate_network(
I = I,
NS = 25000,
NN = 250,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1L, 0.75),
NP = function() 1L + rpois(1L, 0.25),
gamma.shape = 5,
gamma.scale = 5e-4,
timestep = 1,
maxDst = 4,
prob = c(0.3,rep(0.175,4L)),
removeGapOnly = TRUE,
verbose = TRUE
) -> res2
res2$edge %>%
lapply(function(x) length(x)) %>%
unlist -> desc
## Obtain the tips (node without children):
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
save.image()
## i=10L
npar <- integer(length(res2$edge))
tmp <- unlist(res2$edge)
1L:length(res2$edge)
i=1L
sum(tmp == i)
npar[i]
sum(tmp == i)
i=2L
sum(tmp == i)
npar <- integer(length(res2$edge))
tmp <- unlist(res2$edge)
for(i in 1L:length(res2$edge))
npar[i] <- sum(tmp == i)
npar
npar[tips]
tips
tips
npar[tips]
npar
tips
npar[tips]
res2$edge[tips]
unlist(res2$edge[tips])
npar[tips]
tmp
tmp == i
sum(tmp == i)
tips
npar
npar[tips]
res2$edge %>%
lapply(function(x) !length(x)) %>%
unlist %>%
which -> tips
tips
res2$edge %>%
lapply(function(x) length(x) == 0L) %>%
unlist %>%
which -> tips
tips
res2$edge %>%
lapply(function(x) length(x) == 0L) %>%
unlist %>%
which -> tips
tips
npar[tips]
desc
desc[tips]
all(desc[tips] == 0L)
any(desc[tips] != 0L)
rm(npar)
rm(i)
rm(tmp)
## Plot the trait simulation results for the first trail:
i <- getDescTrail(res2, tips[1L])
i
## Plot the trait simulation results for the first trail:
i <- getDescTrail(res2, tips[100L])
i
par(mar=c(4,4,1,1))
plot(NA, xlim=c(0,(length(i) - 1)), ylim=range(res2$trait$traitLog[i,]),
xlab="Time", ylab="Trait value", las=1L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,1L], col="black")
if(!is.na(res2$trait$tem[[1L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,1L], col="black", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,2L], col="red")
if(!is.na(res2$trait$tem[[2L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,2L], col="red", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,3L], col="blue")
if(!is.na(res2$trait$tem[[3L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,3L], col="blue", lty=3L)
lines(x=0:(length(i) - 1), y=res2$trait$traitLog[i,4L], col="green")
if(!is.na(res2$trait$tem[[4L]]$getOptima())[1L])
lines(x=0:(length(i) - 1), y=res2$trait$optimLog[i,4L], col="green", lty=3L)
rm(dnaParam,I,traitMod,res,res2,show.sequences,getDescTrail,i,tips,
network_round_plot)
rm(dnaParam,I,traitMod,res,res2,show.sequences,getDescTrail,i,tips,desc,
network_round_plot)

concatenate(res$sqn, discard = "-"),
cex=0.75,
font=2L
)
seqId <- rep(LETTERS[1:10], each=100)
simulate_network(
I = I,
NS = 100,
NN = 1000,
SID = seqId,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1, 4),
NP = function() 1L + rpois(1, 3),
gamma.shape = 5,
gamma.scale = 5e-4,
timestep = 1,
maxDst = 5,
prob = c(0.3,rep(0.175,4)),
removeGapOnly = TRUE,
verbose = TRUE
) -> res
res$sqn
seqId
res$sqn[,seqId == "A"]
seqId == "A"
res$sqn[,seqId == "A"]
seqId == "A"
res$sqn
set.seed(12345)
seqId <- rep(LETTERS[1:10], each=100)
simulate_network(
I = I,
NS = 100,
NN = 1000,
SID = seqId,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1, 4),
NP = function() 1L + rpois(1, 3),
gamma.shape = 5,
gamma.scale = 5e-4,
timestep = 1,
maxDst = 5,
prob = c(0.3,rep(0.175,4)),
removeGapOnly = FALSE,
verbose = TRUE
) -> res
show.sequences(
concatenate(res$sqn[,seqId == "A"]),
cex=0.75,
font=2L
)
rm(list=ls())
detach("package:PhyloSim", unload=TRUE)
library(yaml)
library(Rcpp)
library(PhyloSim)  ## detach("package:PhyloSim", unload=TRUE)
library(ape)
library(rgl)
source("aux.R")
yaml.load_file(
system.file(
package = "PhyloSim",
"extdata",
"evolMod.yml"
)
) -> dnaParam
read.mutationMat(
dnaParam$DNA
) -> I
I
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
set.seed(12345)
seqId <- rep(LETTERS[1:10], each=100)
simulate_network(
I = I,
NS = 100,
NN = 1000,
SID = seqId,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1, 4),
NP = function() 1L + rpois(1, 3),
gamma.shape = 5,
gamma.scale = 5e-4,
timestep = 1,
maxDst = 5,
prob = c(0.3,rep(0.175,4)),
removeGapOnly = FALSE,
verbose = TRUE
) -> res
show.sequences(
concatenate(res$sqn[,seqId == "A"]),
cex=0.75,
font=2L
)
show.sequences(
concatenate(res$sqn[,seqId == "A"], discard = "-"),
cex=0.75,
font=2L
)
show.sequences(
concatenate(res$sqn[,seqId == "B"], discard = "-"),
cex=0.75,
font=2L
)
show.sequences
G <- -0.5*as.matrix(res$dst^2)
delta <- t(t(G - rowMeans(G)) - colMeans(G)) + mean(G)
eig <- eigen(delta)
coords <- eig$vectors[,1L:2L] %*% diag(sqrt(eig$values[1L:2L]))
coords <- eig$vectors[,1L:2L] %*% diag(sqrt(eig$values[1L:2L]))
plot(coords, type = "n")
for(i in 1L:length(res$edge))
if(length(res$edge[[i]])) {
segments(
x0 = coords[i,1L],
x1 = coords[res$edge[[i]],1L],
y0 = coords[i,2L],
y1 = coords[res$edge[[i]],2L],
lwd = 0.25,
col="grey"
)
}
points(coords, cex=0.25)
n <- 10   ## Node 10 was chosen for this example
wh <- which(unlist(lapply(res$edge,function(x, y) any(x == y), y=n)))
if(length(wh)) {
segments(x0=coords[wh,1L], x1=coords[n,1L], y0=coords[wh,2L],
y1=coords[n,2L], col = "green")
points(x=coords[wh,1L], y=coords[wh,2L], col="green", cex=0.5)
}
if(length(res$edge[[n]])) {
segments(x0=coords[n,1L], x1=coords[res$edge[[n]],1L], y0=coords[n,2L],
y1=coords[res$edge[[n]],2L], col = "red")
points(x=coords[res$edge[[n]],1L], y=coords[res$edge[[n]],2L], col="red",
cex=0.5)
}
points(x=coords[n,1L], y=coords[n,2L], col="blue", cex=0.5)
res$edge %>%
lapply(length) %>%
unlist %>%
sum %>%
matrix(
data = NA,
nrow=2L,
ncol=.
) -> segment_idx
j <- 1L
for(i in 1L:length(res$edge)) {
n <- length(res$edge[[i]])
if(n) {
segment_idx[1L,(j - 1L) + 1L:n] <- rep(i,length(res$edge[[i]]))
segment_idx[2L,(j - 1L) + 1L:n] <- res$edge[[i]]
}
j <- j + n
}
rm(j,n)
coords3d <- eig$vectors[,1L:3L] %*% diag(sqrt(eig$values[1L:3L]))
wire3d(
mesh3d(
x=coords3d[,1L],
y=coords3d[,2L],
z=coords3d[,3L],
segments=segment_idx
)
)
res$edge %>% lapply(length) %>% unlist %>% {.==0} %>% which -> wh
points3d(coords3d[wh,], col="red")
rglwidget()
wh
coords3d
coords3d[,1L]
coords3d[,2L]
coords3d[,3L]
segment_idx
res$edge
res$edge %>% lapply(length) %>% unlist %>% {.==0} %>% which -> wh
wh
points3d(coords3d[wh,], col="red")
rglwidget()
rm(list=ls())
detach("package:PhyloSim", unload=TRUE)
library(yaml)
library(Rcpp)
library(PhyloSim)  ## detach("package:PhyloSim", unload=TRUE)
library(ape)
library(rgl)
yaml.load_file(
system.file(
package = "PhyloSim",
"extdata",
"evolMod.yml"
)
) -> dnaParam
read.mutationMat(
dnaParam$DNA
) -> I
I
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
set.seed(12345)
seqId <- rep(LETTERS[1:10], each=100)
simulate_network(
I = I,
NS = 100,
NN = 1000,
SID = seqId,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1L + rpois(1, 4),
NP = function() 1L + rpois(1, 3),
gamma.shape = 5,
gamma.scale = 5e-4,
timestep = 1,
maxDst = 5,
prob = c(0.3,rep(0.175,4)),
removeGapOnly = FALSE,
verbose = TRUE
) -> res
show.sequences(
concatenate(res$sqn[,seqId == "A"], discard = "-"),
cex=0.75,
font=2
)
source("aux.R")
show.sequences(
concatenate(res$sqn[,seqId == "A"], discard = "-"),
cex=0.75,
font=2
)
show.sequences(
concatenate(res$sqn[,seqId == "B"], discard = "-"),
cex=0.75,
font=2
)
G <- -0.5*as.matrix(res$dst^2)
delta <- t(t(G - rowMeans(G)) - colMeans(G)) + mean(G)
eig <- eigen(delta)
coords <- eig$vectors[,1:2] %*% diag(sqrt(eig$values[1:2]))
plot(coords, type = "n")
for(i in 1L:length(res$edge))
if(length(res$edge[[i]])) {
segments(
x0 = coords[i,1],
x1 = coords[res$edge[[i]],1],
y0 = coords[i,2],
y1 = coords[res$edge[[i]],2],
lwd = 0.25,
col="grey"
)
}
points(coords, cex=0.25)
n <- 10   ## Node 10 was chosen for this example
wh <- which(unlist(lapply(res$edge,function(x, y) any(x == y), y=n)))
if(length(wh)) {
segments(x0=coords[wh,1L], x1=coords[n,1L], y0=coords[wh,2L],
y1=coords[n,2L], col = "green")
points(x=coords[wh,1L], y=coords[wh,2L], col="green", cex=0.5)
}
if(length(res$edge[[n]])) {
segments(x0=coords[n,1L], x1=coords[res$edge[[n]],1L], y0=coords[n,2L],
y1=coords[res$edge[[n]],2L], col = "red")
points(x=coords[res$edge[[n]],1L], y=coords[res$edge[[n]],2L], col="red",
cex=0.5)
}
points(x=coords[n,1L], y=coords[n,2L], col="blue", cex=0.5)
res$edge %>%
lapply(length) %>%
unlist %>%
sum %>%
matrix(
data = NA,
nrow=2L,
ncol=.
) -> segment_idx
j <- 1L
for(i in 1L:length(res$edge)) {
n <- length(res$edge[[i]])
if(n) {
segment_idx[1L,(j - 1L) + 1L:n] <- rep(i,length(res$edge[[i]]))
segment_idx[2L,(j - 1L) + 1L:n] <- res$edge[[i]]
}
j <- j + n
}
rm(j,n)
coords3d <- eig$vectors[,1L:3L] %*% diag(sqrt(eig$values[1L:3L]))
wire3d(
mesh3d(
x=coords3d[,1L],
y=coords3d[,2L],
z=coords3d[,3L],
segments=segment_idx
)
)
res$edge %>% lapply(length) %>% unlist %>% {.==0} %>% which -> wh
points3d(coords3d[wh,], col="red")
rglwidget()
wh
wire3d(
mesh3d(
x=coords3d[,1L],
y=coords3d[,2L],
z=coords3d[,3L],
segments=segment_idx
)
)
rglwidget()
wire3d(
mesh3d(
x=coords3d[,1L],
y=coords3d[,2L],
z=coords3d[,3L],
segments=segment_idx
)
)
rglwidget()
wire3d(
mesh3d(
x=coords3d[,1L],
y=coords3d[,2L],
z=coords3d[,3L],
segments=segment_idx
),
col="black"
)
rglwidget()
wire3d(
mesh3d(
x=coords3d[,1L],
y=coords3d[,2L],
z=coords3d[,3L],
segments=segment_idx
),
col="black"
)
rglwidget()
q()
y
rm(list=ls())
library(yaml)
library(Rcpp)
library(PhyloSim)  ## detach("package:PhyloSim", unload=TRUE)
library(ape)
library(rgl)
source("aux.R")
## Load the example of a configuration file provided with the
## package:
yaml.load_file(
system.file(
package = "PhyloSim",
"extdata",
"evolMod.yml"
)
) -> dnaParam
## The configuration list is located in member `$DNA`
read.mutationMat(
dnaParam$DNA
) -> I
## The transition intensity matrix:
I
## The trait evolution model parameters:
dnaParam$trait %>%
lapply(read.TraitEvolMod) -> traitMod
set.seed(12345)
seqId <- rep(LETTERS[1:10], each=1000)
set.seed(12345)
seqId <- rep(LETTERS[1:20], each=500)
simulate_network(
I = I,
NS = 1000,
NN = 10000,
SID = seqId,
traitMod = traitMod,
initState = c(2,NA,1,1),
initValue = c(50,0,15,-25),
NC = function() 1 + rpois(1, 4),
NP = function() 1 + rpois(1, 3),
gamma.shape = 5,
gamma.scale = 5e-4,
timestep = 1,
maxDst = function() runif(1,3,7),
prob = c(0.3,rep(0.175,4)),
removeGapOnly = FALSE,
verbose = TRUE
) -> res
unique(seqId)
i="A"
res$sqn[,seqId == i]
show.sequences
simulate_network
res$sqn[,seqId == i] %>%
.[,apply(., 2L, function(x) !all(x == charToRaw("-")))]
res$sqn[,seqId == i] %>%
.[,apply(., 2L, function(x) !all(x == charToRaw("-")))] %>%
concatenate
sprintf("Sequence_%s.fst",i)
res$sqn[,seqId == i] %>%
.[,apply(., 2L, function(x) !all(x == charToRaw("-")))] %>%
concatenate %>%
write.fasta(
file = sprintf("Sequence_%s.fst",i),
linebreak = 70
)
for(i in unique(seqId))
res$sqn[,seqId == i] %>%
.[,apply(., 2L, function(x) !all(x == charToRaw("-")))] %>%
concatenate %>%
write.fasta(
file = sprintf("Sequence_%s.fst",i),
linebreak = 70
)
## Calculate the principal coordinates of the pairwise distance matrix for
## displaying the networks:
G <- -0.5*as.matrix(res$dst^2)
delta <- t(t(G - rowMeans(G)) - colMeans(G)) + mean(G)
## rowMeans(delta)
## colMeans(delta)
## mean(delta)
eig <- eigen(delta)
## Two dimensional network plot:
coords <- eig$vectors[,1:2] %*% diag(sqrt(eig$values[1:2]))
plot(coords, type = "n")
for(i in 1L:length(res$edge))
if(length(res$edge[[i]])) {
segments(
x0 = coords[i,1],
x1 = coords[res$edge[[i]],1],
y0 = coords[i,2],
y1 = coords[res$edge[[i]],2],
lwd = 0.25,
col="grey"
)
## if(is.null(locator(1L))) break
}
points(coords, cex=0.25)
n <- 10   ## Node 10 was chosen for this example
wh <- which(unlist(lapply(res$edge,function(x, y) any(x == y), y=n)))
if(length(wh)) {
segments(x0=coords[wh,1L], x1=coords[n,1L], y0=coords[wh,2L],
y1=coords[n,2L], col = "green")
points(x=coords[wh,1L], y=coords[wh,2L], col="green", cex=0.5)
}
if(length(res$edge[[n]])) {
segments(x0=coords[n,1L], x1=coords[res$edge[[n]],1L], y0=coords[n,2L],
y1=coords[res$edge[[n]],2L], col = "red")
points(x=coords[res$edge[[n]],1L], y=coords[res$edge[[n]],2L], col="red",
cex=0.5)
}
points(x=coords[n,1L], y=coords[n,2L], col="blue", cex=0.5)
## Calculating the indices of the segments:
res$edge %>%
lapply(length) %>%
unlist %>%
sum %>%
matrix(
data = NA,
nrow=2L,
ncol=.
) -> segment_idx
j <- 1L
for(i in 1L:length(res$edge)) {
n <- length(res$edge[[i]])
if(n) {
segment_idx[1L,(j - 1L) + 1L:n] <- rep(i,length(res$edge[[i]]))
segment_idx[2L,(j - 1L) + 1L:n] <- res$edge[[i]]
}
j <- j + n
}
rm(j,n)
## Getting the first three principal coordinates of the dissimilarity matrix:
coords3d <- eig$vectors[,1L:3L] %*% diag(sqrt(eig$values[1L:3L]))
wire3d(
mesh3d(
x = coords3d,
segments = segment_idx
),
col="grey"
)
points3d(coords3d[1L,], col="orange")
points3d(coords3d[res$cld == 0L,], col="red")
points3d(coords3d[res$cld > 0L,], col="green")
rglwidget()
for(i in unique(seqId))
res$sqn[,seqId == i] %>%
concatenate(discard = "-") %>%
write.fasta(
file = sprintf("Sequence_raw_%s.fst",i),
linebreak = 70
)
for(i in unique(seqId))
res$sqn[,seqId == i] %>%
.[,apply(., 2L, function(x) !all(x == charToRaw("-")))] %>%
concatenate %>%
write.fasta(
file = sprintf("Sequence_Aligned_%s.fst",i),
linebreak = 70
)
for(i in unique(seqId))
res$sqn[,seqId == i] %>%
.[,apply(., 2L, function(x) !all(x == charToRaw("-")))] %>%
concatenate %>%
write.fasta(
file = sprintf("Sequence_Aligned_%s.fst",i),
linebreak = 70
)

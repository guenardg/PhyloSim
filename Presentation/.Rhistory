plot1_edge(linear, 1L)          ## Pinpoint an edge
plot1_influence(linear, 3L, 4L) ## Displays the partial influence matrix
plot1_graph(linear)             ## Displays the complete influence matrix
## The tree case:
plot1_graph(tree, "\"")         ## Display the graph
## rm(list=ls())
source("PEM_seminar-aux.R")
## The linear case:
plot1_graph(linear, "\"")       ## Display the graph
plot1_vertex(linear, 1L)        ## Pinpoint a vertex
plot1_edge(linear, 1L)          ## Pinpoint an edge
plot1_influence(linear, 3L, 4L) ## Displays the partial influence matrix
plot1_graph(linear)             ## Displays the complete influence matrix
## The tree case:
plot1_graph(tree, "\"")         ## Display the graph
list(
N = 7L,
len = c(1,1,1,1,1,1)
) -> linear
linear %>%
{pop.graph(
n = linear$N,
vertex = list(
x = c(0,cumsum(.$len)/sum(.$len)),
y = rep(0.5, linear$N)
),
label = LETTERS[1L:linear$N]
)} -> linear$graph
sprintf("%01d",1L:(linear$N - 1L))
sprintf("%02d",1L:(linear$N - 1L))
linear$graph %<>%
add.edge(
from = 1L:(linear$N - 1L),
to = 2L:linear$N,
edge = list(len=linear$len),
label = sprintf("%02d",1L:(linear$N - 1L))
)
linear$Infl <- PEMInfluence(linear$graph)
save(linear, file="linear.rda")
list(
N = 9L
) -> tree
LETTERS[1L:tree$N]
list(
N = 9L
) -> tree
tree %>%
{pop.graph(
n = tree$N,
vertex = list(
x = c(0.00,0.50,0.70,0.60,1.00,1.00,1.00,1.00,1.00),
y = c(0.50,0.75,0.87,0.12,1.00,0.75,0.50,0.25,0.00)
),
label = LETTERS[1L:tree$N]
)} -> tree$graph
sprintf("%02d",1L:8L)
tree$graph %<>%
add.edge(
from = c(1,1,2,3,3,2,4,4),
to   = c(2,4,3,5,6,7,8,9),
edge = list(len=c(0.5,0.6,0.2,0.3,0.3,0.5,0.4,0.4)),
label = sprintf("%02d",1L:8L)
)
tree$Infl <- PEMInfluence(tree$graph)
save(tree, file="tree.rda")
list(
N = 10L
) -> reticulate
reticulate %>%
{pop.graph(
n = reticulate$N,
vertex = list(
x = c(0.00,0.20,0.30,0.50,0.70,1.00,1.00,1.00,1.00,1.00),
y = c(0.50,0.70,0.20,0.45,0.87,1.00,0.75,0.50,0.25,0.00)
),
label = LETTERS[1L:reticulate$N]
)} -> reticulate$graph
reticulate$graph %<>%
add.edge(
from = c(1,1,2,3,2,5,5,4,4,3),
to   = c(2,3,4,4,5,6,7,8,9,10),
edge = list(len=c(0.2,0.3,0.3,0.2,0.4,0.4,0.4,0.5,0.5,0.7)),
label = sprintf("%02d",1L:10L)
)
reticulate$Infl <- PEMInfluence(reticulate$graph)
save(reticulate, file="reticulate.rda")
recalculateExamples <- TRUE
source("PEM_seminar-examples.R")
recalculateExamples <- FALSE
source("PEM_seminar-examples.R")
## The linear case:
plot1_graph(linear, "\"")       ## Display the graph
plot1_vertex(linear, 1L)        ## Pinpoint a vertex
plot1_edge(linear, 1L)          ## Pinpoint an edge
plot1_influence(linear, 3L, 4L) ## Displays the partial influence matrix
## The tree case:
plot1_graph(tree, "\"")         ## Display the graph
plot1_vertex(tree, 1L)          ## Pinpoint a vertex
plot1_edge(tree, 6L)            ## Pinpoint an edge
plot1_influence(tree, 4L, 5L)   ## Displays the partial influence matrix
plot1_graph(tree)               ## Displays the complete influence matrix
plot1_graph(reticulate, "\"")       ## Display the graph
plot1_vertex(reticulate, 3L)        ## Pinpoint a vertex
plot1_edge(reticulate, 6L)          ## Pinpoint an edge
plot1_influence(reticulate, 7L, 9L) ## Displays the partial influence matrix
plot1_graph(reticulate)             ## Displays the complete influence matrix
plot1_graph(reticulate)             ## Displays the complete influence matrix
plot1_influence(reticulate, 7L, 9L) ## Displays the partial influence matrix
plot1_vertex(reticulate, 3L)        ## Pinpoint a vertex
plot1_edge(reticulate, 6L)          ## Pinpoint an edge
## The linear case:
plot1_graph(linear, "\"")       ## Display the graph
plot1_vertex(linear, 1L)        ## Pinpoint a vertex
## The linear case:
plot1_graph(linear, "\"")       ## Display the graph
plot1_vertex(linear, 1L)        ## Pinpoint a vertex
plot1_edge(linear, 1L)          ## Pinpoint an edge
plot1_influence(linear, 3L, 4L) ## Displays the partial influence matrix
plot1_graph(linear)             ## Displays the complete influence matrix
## The tree case:
plot1_graph(tree, "\"")         ## Display the graph
plot1_vertex(tree, 1L)          ## Pinpoint a vertex
plot1_edge(tree, 6L)            ## Pinpoint an edge
plot1_influence(tree, 4L, 5L)   ## Displays the partial influence matrix
plot1_graph(tree)               ## Displays the complete influence matrix
plot1_graph(reticulate, "\"")       ## Display the graph
plot1_vertex(reticulate, 3L)        ## Pinpoint a vertex
plot1_edge(reticulate, 6L)          ## Pinpoint an edge
plot1_influence(reticulate, 7L, 9L) ## Displays the partial influence matrix
plot1_graph(reticulate)             ## Displays the complete influence matrix
ls
ls()
x <- linear
v=1
par(mfrow = c(1L,2L), mar=c(1,1,2,1))
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
showEdges(x$graph, e)
showEdges(x$graph)
droplineVertex(x$graph, v, length=0.1)
showVertices(x$graph, highlight = v)
droplineVertexGraph(x$graph, e, lty=2L)
droplineVertexGraph(x$graph, v, lty=2L)
rm(list=ls())
source("PEM_seminar-aux.R")
recalculateExamples <- FALSE
source("PEM_seminar-examples.R")
rm(list=ls())
library(MPSEM)
library(magrittr)
## rm(list=ls())
source("PEM_seminar-aux.R")
recalculateExamples <- FALSE
source("PEM_seminar-examples.R")
## The linear case:
plot1_graph(linear, "\"")       ## Display the graph
plot1_vertex(linear, 1L)        ## Pinpoint a vertex
plot1_edge(linear, 1L)          ## Pinpoint an edge
plot1_influence(linear, 3L, 4L) ## Displays the partial influence matrix
x <- linear
v=1
placeHolder = "\""
par(mfrow = c(1L,2L), mar=c(1,1,2,1))
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
missing(e)
showEdges(x$graph)
droplineVertex(x$graph, v, length=0.1)
showVertices(x$graph, highlight = v)
droplineEdgeGraph(x$graph, e, lty=2L)
missing(e)
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
tmp <- x$Infl
storage.mode(tmp) <- "character"
tmp[-(1L:v),] <- placeHolder
attr(x,"ev")
attr(x,"ev")
x
attr(x$graph,"ev")
attr(x$graph,"ev")[1L]
1L:attr(x$graph,"ev")[1L]
!missing(e)
showMatrix(tmp, highlight = cbind(v,1L:attr(x$graph,"ev")[1L]))
v=4
par(mfrow = c(1L,2L), mar=c(1,1,2,1))
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
if(missing(e)) showEdges(x$graph) else showEdges(x$graph, e)
showEdges(x$graph)
droplineVertex(x$graph, v, length=0.1)
showVertices(x$graph, highlight = v)
!missing(e)
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
tmp <- x$Infl
storage.mode(tmp) <- "character"
tmp[-(1L:v),] <- placeHolder
if(!missing(e)) {
tmp[v,-(1L:e)] <- placeHolder
showMatrix(tmp, highlight = cbind(v,e))
droplineEdgeMatrix(x$graph, e, lty=2L)
} else
showMatrix(tmp, highlight = cbind(v,1L:attr(x$graph,"ev")[1L]))
showMatrix(tmp, highlight = cbind(v,1L:attr(x$graph,"ev")[1L]))
rm(list=ls())
library(MPSEM)
library(magrittr)
## rm(list=ls())
source("PEM_seminar-aux.R")
recalculateExamples <- FALSE
source("PEM_seminar-examples.R")
## The linear case:
plot1_graph(linear, "\"")       ## Display the graph
plot1_vertex(linear, 1L)        ## Pinpoint a vertex
plot1_edge(linear, 1L)          ## Pinpoint an edge
plot1_influence(linear, 3L, 4L) ## Displays the partial influence matrix
plot1_influence(linear, 4L)     ## Displays the partial influence matrix
plot1_graph(linear)             ## Displays the complete influence matrix
## The tree case:
plot1_graph(tree, "\"")         ## Display the graph
plot1_vertex(tree, 1L)          ## Pinpoint a vertex
plot1_edge(tree, 6L)            ## Pinpoint an edge
plot1_influence(tree, 4L, 5L)   ## Displays the partial influence matrix
plot1_influence(tree, 4L, 5L)   ## Displays the partial influence matrix
plot1_influence(tree, 5L)       ## Displays the partial influence matrix
plot1_influence <- function(x, v, e, placeHolder = "\"") {
par(mfrow = c(1L,2L), mar=c(1,1,2,1))
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
if(missing(e)) showEdges(x$graph, label=TRUE) else showEdges(x$graph, e)
droplineVertex(x$graph, v, length=0.1)
showVertices(x$graph, highlight = v)
if(!missing(e))
droplineEdgeGraph(x$graph, e, lty=2L)
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
tmp <- x$Infl
storage.mode(tmp) <- "character"
tmp[-(1L:v),] <- placeHolder
if(!missing(e)) {
tmp[v,-(1L:e)] <- placeHolder
showMatrix(tmp, highlight = cbind(v,e))
droplineEdgeMatrix(x$graph, e, lty=2L)
} else
showMatrix(tmp, highlight = cbind(v,1L:attr(x$graph,"ev")[1L]))
invisible(NULL)
}
plot1_influence(tree, 4L, 5L)   ## Displays the partial influence matrix
plot1_influence(tree, 5L)       ## Displays the partial influence matrix
plot1_influence(linear, 4L)     ## Displays the partial influence matrix
x <- linear
v=4
placeHolder = "\""
par(mfrow = c(1L,2L), mar=c(1,1,2,1))
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
x$infl[v,]
x$infl
x$Infl
x$Infl[v,]
which(x$Infl[v,])
which(!!x$Infl[v,])
showEdges(x$graph, c(), label=TRUE)
showEdges(x$graph, which(!!x$Infl[v,]), label=TRUE)
rm(x)
rm(placeHolder)
rm(v)
plot1_influence <- function(x, v, e, placeHolder = "\"") {
par(mfrow = c(1L,2L), mar=c(1,1,2,1))
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
if(missing(e)) {
showEdges(x$graph, which(!!x$Infl[v,]), label=TRUE)
} else
showEdges(x$graph, e)
droplineVertex(x$graph, v, length=0.1)
showVertices(x$graph, highlight = v)
if(!missing(e))
droplineEdgeGraph(x$graph, e, lty=2L)
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", axes=FALSE)
tmp <- x$Infl
storage.mode(tmp) <- "character"
tmp[-(1L:v),] <- placeHolder
if(!missing(e)) {
tmp[v,-(1L:e)] <- placeHolder
showMatrix(tmp, highlight = cbind(v,e))
droplineEdgeMatrix(x$graph, e, lty=2L)
} else
showMatrix(tmp, highlight = cbind(v,1L:attr(x$graph,"ev")[1L]))
invisible(NULL)
}
plot1_graph(linear)             ## Displays the complete influence matrix
plot1_influence(linear, 3L, 4L) ## Displays the partial influence matrix
plot1_influence(linear, 4L)     ## Displays the partial influence matrix
## The tree case:
plot1_graph(tree, "\"")         ## Display the graph
plot1_vertex(tree, 1L)          ## Pinpoint a vertex
plot1_edge(tree, 6L)            ## Pinpoint an edge
plot1_influence(tree, 4L, 5L)   ## Displays the partial influence matrix
plot1_influence(tree, 5L)       ## Displays the partial influence matrix
plot1_influence(tree, 1L)       ## Displays the partial influence matrix
plot1_influence(tree, 2L)       ## Displays the partial influence matrix
plot1_graph(tree)               ## Displays the complete influence matrix
plot1_graph(reticulate, "\"")       ## Display the graph
plot1_vertex(reticulate, 3L)        ## Pinpoint a vertex
plot1_edge(reticulate, 6L)          ## Pinpoint an edge
plot1_influence(reticulate, 7L, 9L) ## Displays the partial influence matrix
plot1_graph(reticulate, "\"")       ## Display the graph
plot1_vertex(reticulate, 3L)        ## Pinpoint a vertex
plot1_edge(reticulate, 6L)          ## Pinpoint an edge
plot1_influence(reticulate, 6L, 7L) ## Displays the partial influence matrix
plot1_influence(reticulate, 7L)     ## Displays the partial influence matrix
linear$N
list(
N = 7L,
len = c(1,1,1,1,1,1)
) -> linear
linear %>%
{pop.graph(
n = linear$N,
vertex = list(
s = rep(TRUE, linear$N),
x = c(0,cumsum(.$len)/sum(.$len)),
y = rep(0.5, linear$N)
),
label = LETTERS[1L:linear$N]
)} -> linear$graph
linear$graph %<>%
add.edge(
from = 1L:(linear$N - 1L),
to = 2L:linear$N,
edge = list(len=linear$len),
label = sprintf("%02d",1L:(linear$N - 1L))
)
linear$Infl <- PEMInfluence(linear$graph)
save(linear, file="linear.rda")
list(
N = 9L
) -> tree
list(
N = 9L
) -> tree
tree %>%
{pop.graph(
n = tree$N,
vertex = list(
s = c(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE),
x = c(0.00,0.50,0.70,0.60,1.00,1.00,1.00,1.00,1.00),
y = c(0.50,0.75,0.87,0.12,1.00,0.75,0.50,0.25,0.00)
),
label = LETTERS[1L:tree$N]
)} -> tree$graph
tree$graph %<>%
add.edge(
from = c(1,1,2,3,3,2,4,4),
to   = c(2,4,3,5,6,7,8,9),
edge = list(len=c(0.5,0.6,0.2,0.3,0.3,0.5,0.4,0.4)),
label = sprintf("%02d",1L:8L)
)
tree$Infl <- PEMInfluence(tree$graph)
save(tree, file="tree.rda")
list(
N = 10L
) -> reticulate
list(
N = 10L
) -> reticulate
reticulate %>%
{pop.graph(
n = reticulate$N,
vertex = list(
s = c(FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE),
x = c(0.00,0.20,0.30,0.50,0.70,1.00,1.00,1.00,1.00,1.00),
y = c(0.50,0.70,0.20,0.45,0.87,1.00,0.75,0.50,0.25,0.00)
),
label = LETTERS[1L:reticulate$N]
)} -> reticulate$graph
reticulate$graph %<>%
add.edge(
from = c(1,1,2,3,2,5,5,4,4,3),
to   = c(2,3,4,4,5,6,7,8,9,10),
edge = list(len=c(0.2,0.3,0.3,0.2,0.4,0.4,0.4,0.5,0.5,0.7)),
label = sprintf("%02d",1L:10L)
)
reticulate$Infl <- PEMInfluence(reticulate$graph)
save(reticulate, file="reticulate.rda")
rm(list=ls())
## rm(list=ls())
source("PEM_seminar-aux.R")
recalculateExamples <- FALSE
recalculateExamples <- TRUE
source("PEM_seminar-examples.R")
## The linear case:
plot1_graph(linear, "\"")           ## Display the graph
plot1_vertex(linear, 1L)            ## Pinpoint a vertex
plot1_edge(linear, 1L)              ## Pinpoint an edge
plot1_influence(linear, 3L, 4L)     ## Displays the partial influence matrix
plot1_influence(linear, 4L)         ## Displays the partial influence matrix
plot1_graph(linear)                 ## Displays the complete influence matrix
PEM.build(linear, d="len", sp="s")
PEM.build(linear$graph, d="len", sp="s")
PEM.build
d="len"
sp="s"
x <- linear$graph
x <- linear$graph
a <- 0
psi <- 1
tol <- .Machine$double.eps^0.5
if(attr(x,"class") != "graph")
stop("Parameter 'x' must be of class 'graph'")
attr(x,"class")
stop("Parameter 'x' must be of class 'graph'")
is.null(x$edge[[d]])
is.null(x$vertex[[sp]])
nsp <- sum(x$vertex[[sp]])
nsp
### All graphs sould be single-rooted
ev <- as.integer(attr(x, "ev"))  # Just to be sure.
ev
a <- rep(a,length.out=ev[1L])
a
psi <- rep(psi,length.out=ev[1L])
psi
out <- list(x=x,sp=x$vertex[[sp]])
out[["B"]] <-
matrix(.C("PEMInfMat",
as.integer(x$edge[[1L]]),
as.integer(x$edge[[2L]]),
ev[1L],ev[2L],
B = integer(ev[2L]*ev[1L]))$B,ev[2L],ev[1L])[x$vertex[[sp]],]
out <- c(out,.C("PEMbuildC",
ne=ev[1L],nsp=nsp,
Bc=as.double(out$B),
means=double(ev[1L]),
dist=as.double(x$edge[[d]]),
a=as.double(a),
psi=as.double(psi),
w=double(ev[1L]),
BcW=double(nsp*ev[1L])))
attr(out$Bc,"dim") <- c(nsp,ev[1L])
attr(out$BcW,"dim") <- c(nsp,ev[1L])
dimnames(out$Bc) <- dimnames(out$BcW) <-
list(attr(x,"vlabel")[x$vertex[[sp]]],attr(x,"elabel"))
out <- c(out, La.svd(out$BcW,nsp,nsp))
sel <- out$d >= tol
out$d <- out$d[sel]
out$u <- out$u[,sel,drop=FALSE]
out$vt <- out$vt[sel,,drop=FALSE]
rownames(out$vt) <- colnames(out$u) <- paste("V",1L:sum(sel),sep="_")
out$u
colnames(out$u)
paste("V",1L:sum(sel),sep="_")
colnames(out$u)
out$u
paste("V",1L:sum(sel),sep="_")
out$vt
sel
out$d
out$u
sel
out <- list(x=x,sp=x$vertex[[sp]])
out[["B"]] <-
matrix(.C("PEMInfMat",
as.integer(x$edge[[1L]]),
as.integer(x$edge[[2L]]),
ev[1L],ev[2L],
B = integer(ev[2L]*ev[1L]))$B,ev[2L],ev[1L])[x$vertex[[sp]],]
out <- c(out,.C("PEMbuildC",
ne=ev[1L],nsp=nsp,
Bc=as.double(out$B),
means=double(ev[1L]),
dist=as.double(x$edge[[d]]),
a=as.double(a),
psi=as.double(psi),
w=double(ev[1L]),
BcW=double(nsp*ev[1L])))
attr(out$Bc,"dim") <- c(nsp,ev[1L])
attr(out$BcW,"dim") <- c(nsp,ev[1L])
dimnames(out$Bc) <- dimnames(out$BcW) <-
list(attr(x,"vlabel")[x$vertex[[sp]]],attr(x,"elabel"))
out <- c(out, La.svd(out$BcW,nsp,nsp))
out$d >= tol
out$d
rm(list=ls())
library(MPSEM)
library(magrittr)
## rm(list=ls())
source("PEM_seminar-aux.R")
recalculateExamples <- TRUE
rm(list=ls())
library(MPSEM)
library(magrittr)
## rm(list=ls())
source("PEM_seminar-aux.R")
recalculateExamples <- TRUE
## recalculateExamples <- TRUE
source("PEM_seminar-examples.R")
recalculateExamples <- FALSE
## recalculateExamples <- TRUE
source("PEM_seminar-examples.R")
## The linear case:
plot1_graph(linear, "\"")           ## Display the graph
plot1_vertex(linear, 1L)            ## Pinpoint a vertex
plot1_edge(linear, 1L)              ## Pinpoint an edge
plot1_influence(linear, 3L, 4L)     ## Displays the partial influence matrix
plot1_influence(linear, 4L)         ## Displays the partial influence matrix
plot1_graph(linear)                 ## Displays the complete influence matrix
PEM.build(linear$graph, d="len", sp="s")
PEM.build(tree$graph, d="len", sp="s")
plot1_graph(tree)                   ## Displays the complete influence matrix
tree$PEM <- PEM.build(tree$graph, d="len", sp="s")
tree$PEM <- PEM.build(tree$graph, d="len", sp="s")
save(tree, file="tree.rda")
reticulate$PEM <- PEM.build(reticulate$graph, d="len", sp="s")
save(reticulate, file="reticulate.rda")
tree$PEM$u
reticulate$PEM$u
plot1_graph(reticulate)             ## Displays the complete influence matrix
reticulate$PEM$u
